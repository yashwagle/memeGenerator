{"ast":null,"code":"var _jsxFileName = \"/Users/yashwagle/MemeGenerator/memegenerator/src/Components/InputArea.js\";\nimport React from \"react\";\n\nclass InputArea extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      memeImages: [],\n      randomImage: \"https://i.imgflip.com/30b1gx.jpg\",\n      counter: 1,\n      inputBoxID: 0,\n      inputBoxes: [],\n      fontSize: 12,\n      color: \"\"\n    };\n    this.changeImage = this.changeImage.bind(this);\n    this.addTextBox = this.addTextBox.bind(this);\n    this.dragOverImage = this.dragOverImage.bind(this);\n    this.dropImage = this.dropImage.bind(this);\n    this.fontSizeChange = this.fontSizeChange.bind(this);\n    this.fontColorChange = this.fontColorChange.bind(this);\n    this.onFileLoad = this.onFileLoad.bind(this);\n  }\n\n  changeImage() {\n    console.log(\"Clicked\");\n    this.setState(currentState => {\n      return {\n        counter: currentState.counter + 1,\n        randomImage: currentState.memeImages[currentState.counter].url\n      };\n    });\n  } //get the images and their urls\n\n\n  componentWillMount() {\n    fetch(\"http://127.0.0.1:5000/getimages\").then(response => response.json()).then(response => {\n      const {\n        data\n      } = response;\n      this.setState({\n        memeImages: data.memes\n      });\n    });\n    console.log();\n  } //Create a new text box\n\n\n  addTextBox() {\n    return /*#__PURE__*/React.createElement(\"input\", {\n      className: \"inputBox\",\n      type: \"text\",\n      placeholder: \"Top Text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    });\n  } // Drop a text box on the image\n\n\n  dropImage(event) {\n    const id = event.dataTransfer.getData(\"id\");\n    console.log(id);\n    const boxStyle = {\n      position: \"absolute\",\n      left: event.clientX,\n      top: event.clientY\n    }; // new text box not present in the state\n\n    if (id == -1) {\n      console.log(id);\n      event.preventDefault();\n      const box = {\n        boxID: this.state.inputBoxID,\n        style: boxStyle\n      };\n      this.setState(function (state) {\n        return {\n          inputBoxes: state.inputBoxes.concat(box),\n          inputBoxID: state.inputBoxID + 1\n        };\n      });\n    } // Text box is already created and present in  this.state\n    // only change in coordinates\n    else {\n        const index = this.state.inputBoxes.findIndex(element => element.boxID == id);\n        let newBoxArray = [...this.state.inputBoxes];\n        newBoxArray[index].style = boxStyle;\n        this.setState(function (state) {\n          return {\n            inputBoxes: newBoxArray\n          };\n        });\n      }\n  }\n\n  dragOverImage(event) {\n    event.preventDefault();\n  }\n\n  dragStart(event, id) {\n    event.dataTransfer.setData(\"id\", id);\n  } // change the font style of the text\n\n\n  fontSizeChange(event) {\n    const fSize = event.target.value;\n    this.setState({\n      fontSize: parseInt(fSize, 10)\n    });\n  } // change the font color of the text\n\n\n  fontColorChange(event) {\n    console.log(event.target.value);\n    this.setState({\n      color: event.target.value\n    });\n  } // on file upload get the binary contents of the file\n  // and set the contents of the file\n\n\n  onFileLoad(event) {\n    const file = event.currentTarget.files[0];\n    console.log(file);\n    let fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      this.setState(function () {\n        return {\n          randomImage: \"data:\" + file.type + fileReader.result\n        };\n      });\n    };\n\n    fileReader.readAsDataURL(file);\n  }\n\n  render() {\n    console.log(this.state.inputBoxes);\n    const inputboxes = this.state.inputBoxes.map(item => {\n      const styleClass = {\n        position: item.style.position,\n        left: item.style.left,\n        top: item.style.top,\n        fontSize: this.state.fontSize,\n        color: this.state.color\n      };\n      return /*#__PURE__*/React.createElement(\"textarea\", {\n        id: item.BoxID,\n        key: item.BoxID,\n        className: \"memeInputBox\",\n        style: styleClass,\n        type: \"text\",\n        placeholder: \"Enter Meme Text\",\n        draggable: true,\n        onDragStart: e => {\n          this.dragStart(e, item.boxID);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 14\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputBoxContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"inputBox\",\n      type: \"text\",\n      placeholder: \"Drag me\",\n      draggable: true,\n      onDragStart: e => {\n        this.dragStart(e, -1);\n      },\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"fontSizeInputBox\",\n      list: \"fontSize\",\n      name: \"fontSize\",\n      type: \"number\",\n      onChange: this.fontSizeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"datalist\", {\n      id: \"fontSize\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"14\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"28\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"32\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }\n    })), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"color\",\n      onChange: this.fontColorChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, \"Black\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, \"White\"))), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"memeImage\",\n      src: this.state.randomImage,\n      onDragOver: this.dragOverImage,\n      onDrop: this.dropImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.changeImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }\n    }, \" Next Image\"), inputboxes, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"uploadLabel\",\n      htmlFor: \"upload-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, \"Upload Custom Image \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      id: \"upload-button\",\n      style: {\n        display: \"none\"\n      },\n      onChange: this.onFileLoad,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"submitButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, \"submit\"));\n  }\n\n}\n\nexport default InputArea;","map":{"version":3,"sources":["/Users/yashwagle/MemeGenerator/memegenerator/src/Components/InputArea.js"],"names":["React","InputArea","Component","constructor","state","memeImages","randomImage","counter","inputBoxID","inputBoxes","fontSize","color","changeImage","bind","addTextBox","dragOverImage","dropImage","fontSizeChange","fontColorChange","onFileLoad","console","log","setState","currentState","url","componentWillMount","fetch","then","response","json","data","memes","event","id","dataTransfer","getData","boxStyle","position","left","clientX","top","clientY","preventDefault","box","boxID","style","concat","index","findIndex","element","newBoxArray","dragStart","setData","fSize","target","value","parseInt","file","currentTarget","files","fileReader","FileReader","onload","type","result","readAsDataURL","render","inputboxes","map","item","styleClass","BoxID","e","display"],"mappings":"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","sourcesContent":["import React from \"react\"\n\n\n\n\n\nclass InputArea extends React.Component{\n\n  constructor(){\n    super()\n    this.state={\n      memeImages:[],\n      randomImage:\"https://i.imgflip.com/30b1gx.jpg\",\n      counter:1,\n      inputBoxID:0,\n      inputBoxes:[],\n      fontSize:12,\n      color:\"\"\n    }\n    this.changeImage = this.changeImage.bind(this)\n    this.addTextBox = this.addTextBox.bind(this)\n    this.dragOverImage = this.dragOverImage.bind(this)\n    this.dropImage = this.dropImage.bind(this)\n    this.fontSizeChange = this.fontSizeChange.bind(this)\n    this.fontColorChange = this.fontColorChange.bind(this)\n    this.onFileLoad = this.onFileLoad.bind(this)\n\n  }\n\n   changeImage(){\n     console.log(\"Clicked\");\n    this.setState(currentState=>{\n      return{\n      counter:currentState.counter + 1,\n      randomImage:currentState.memeImages[currentState.counter].url\n    }\n    }\n  )\n  }\n\n\n//get the images and their urls\n  componentWillMount(){\n    fetch(\"http://127.0.0.1:5000/getimages\")\n    .then(response => response.json())\n    .then(response=>{\n      const {data} = response\n      this.setState({\n        memeImages:data.memes\n      })\n    })\n    console.log();\n  }\n\n\n  //Create a new text box\n  addTextBox(){\n    return(\n      <input className=\"inputBox\" type=\"text\" placeholder=\"Top Text\" />\n    )\n  }\n\n  // Drop a text box on the image\n  dropImage(event){\n    const id= event.dataTransfer.getData(\"id\")\n    console.log(id);\n    const boxStyle = {\n    position:\"absolute\",\n    left: event.clientX,\n    top: event.clientY,\n  };\n    // new text box not present in the state\n    if(id==-1){\n      console.log(id);\n      event.preventDefault()\n      const box={\n        boxID:this.state.inputBoxID,\n        style:boxStyle\n      }\n      this.setState(function(state){\n       return {\n         inputBoxes: state.inputBoxes.concat(box),\n         inputBoxID: state.inputBoxID + 1\n       };\n    })\n\n  }\n  // Text box is already created and present in  this.state\n  // only change in coordinates\n  else{\n    const index = this.state.inputBoxes.findIndex(element=>element.boxID==id)\n    let newBoxArray = [...this.state.inputBoxes]\n    newBoxArray[index].style = boxStyle\n    this.setState(function(state){\n     return {\n       inputBoxes: newBoxArray\n     };\n  })\n  }\n}\n\n  dragOverImage(event){\n    event.preventDefault()\n  }\n\n\n  dragStart(event,id){\n    event.dataTransfer.setData(\"id\",id)\n  }\n\n  // change the font style of the text\n  fontSizeChange(event){\n    const fSize = event.target.value\n    this.setState({fontSize:parseInt(fSize,10)})\n  }\n\n  // change the font color of the text\n  fontColorChange(event){\n    console.log(event.target.value);\n    this.setState({color:event.target.value})\n  }\n\n  // on file upload get the binary contents of the file\n  // and set the contents of the file\n  onFileLoad(event){\n    const file = event.currentTarget.files[0]\n    console.log(file);\n    let fileReader = new FileReader()\n    fileReader.onload = ()=>{\n    this.setState(function (){\n      return{\n        randomImage : \"data:\"+file.type+fileReader.result\n      };\n    })\n    }\n    fileReader.readAsDataURL(file)\n  }\n\n\n\n\n\n\n  render(){\n\n    console.log(this.state.inputBoxes);\n    const inputboxes=this.state.inputBoxes.map((item)=>{\n\n      const styleClass={\n        position:item.style.position,\n        left: item.style.left,\n        top: item.style.top,\n        fontSize: this.state.fontSize,\n        color:this.state.color\n      }\n      return <textarea id={item.BoxID} key={item.BoxID} className=\"memeInputBox\" style={styleClass} type=\"text\" placeholder=\"Enter Meme Text\" draggable onDragStart={(e)=>{this.dragStart(e,item.boxID)}} />\n    });\n\n      return(\n        <div>\n        <div className=\"inputBoxContainer\">\n        <input className=\"inputBox\" type=\"text\" placeholder=\"Drag me\" draggable onDragStart={(e)=>{this.dragStart(e,-1)}} readOnly />\n      <input className=\"fontSizeInputBox\" list=\"fontSize\" name=\"fontSize\" type=\"number\" onChange={this.fontSizeChange}/>\n      <datalist id=\"fontSize\">\n      <option value=\"12\" />\n      <option value=\"14\" />\n      <option value=\"18\" />\n      <option value=\"24\" />\n      <option value=\"28\" />\n      <option value=\"32\" />\n  </datalist>\n        <select name=\"color\" onChange={this.fontColorChange}>\n        <option value=\"black\">Black</option>\n        <option value=\"white\">White</option>\n        </select>\n\n        </div>\n        <img className=\"memeImage\" src={this.state.randomImage} onDragOver={this.dragOverImage} onDrop={this.dropImage}/>\n        <button onClick={this.changeImage}> Next Image</button>\n        {inputboxes}\n        <label className=\"uploadLabel\" htmlFor  =\"upload-button\" >Upload Custom Image </label>\n        <input type=\"file\" id=\"upload-button\" style={{ display: \"none\" }} onChange={this.onFileLoad}/>\n        <button className = \"submitButton\">submit</button>\n        </div>\n      )\n  }\n}\n\nexport default InputArea\n"]},"metadata":{},"sourceType":"module"}